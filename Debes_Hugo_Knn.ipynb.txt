{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Classification Challenge.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B2VuxafkmwZR"
      },
      "source": [
        "Importation de nos modules"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V7bqjzXO55zy"
      },
      "source": [
        "import pandas as pd\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from math import sqrt\n",
        "from numpy import mean,std\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4t3zBJSbm0VA"
      },
      "source": [
        "Connexion de mon Google Drive avec le Google Colab pour accèder à mes fichiers."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HZylAykz37QH",
        "outputId": "75d223a2-ce45-4fb9-fb44-c81d9fb6e89b"
      },
      "source": [
        "try:\n",
        "    from google.colab import drive\n",
        "    drive.mount('/content/drive', force_remount=True)\n",
        "    COLAB = True\n",
        "    print(\"Note: using Google CoLab\")\n",
        "    %tensorflow_version 2.x\n",
        "except:\n",
        "    print(\"Note: not using Google CoLab\")\n",
        "    COLAB = False"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n",
            "Note: using Google CoLab\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0bm_HvE4m92d"
      },
      "source": [
        "Création de ma base de données de résultats avec les labels (partie supervisé de l'algorithme)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "4ThxFsuq4FSa",
        "outputId": "876d59a9-2511-4333-ce0b-0f2e9d36a760"
      },
      "source": [
        "data_sample = '/content/drive/MyDrive/ESILV/preTest.csv'\n",
        "data_sample2 = '/content/drive/MyDrive/ESILV/data.csv'\n",
        "data1 = pd.read_csv(data_sample,sep=',',header=None)\n",
        "data2=pd.read_csv(data_sample2,sep=',',header=None)\n",
        "data= data1.append(data2)\n",
        "index_sol = len(data.columns)-1\n",
        "data=data.rename(columns={index_sol:'Class'})\n",
        "data.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.837498</td>\n",
              "      <td>1.329108</td>\n",
              "      <td>0.201185</td>\n",
              "      <td>1.721383</td>\n",
              "      <td>0.263455</td>\n",
              "      <td>0.497376</td>\n",
              "      <td>classB</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3.989348</td>\n",
              "      <td>0.947658</td>\n",
              "      <td>0.171185</td>\n",
              "      <td>1.199333</td>\n",
              "      <td>0.263455</td>\n",
              "      <td>0.517376</td>\n",
              "      <td>classC</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5.268698</td>\n",
              "      <td>1.174208</td>\n",
              "      <td>0.211185</td>\n",
              "      <td>1.534233</td>\n",
              "      <td>0.253455</td>\n",
              "      <td>0.487376</td>\n",
              "      <td>classB</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5.593398</td>\n",
              "      <td>1.195308</td>\n",
              "      <td>0.201185</td>\n",
              "      <td>1.552133</td>\n",
              "      <td>0.263455</td>\n",
              "      <td>0.497376</td>\n",
              "      <td>classA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.091948</td>\n",
              "      <td>1.009908</td>\n",
              "      <td>0.131185</td>\n",
              "      <td>1.234283</td>\n",
              "      <td>0.263455</td>\n",
              "      <td>0.547376</td>\n",
              "      <td>classC</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          0         1         2         3         4         5   Class\n",
              "0  5.837498  1.329108  0.201185  1.721383  0.263455  0.497376  classB\n",
              "1  3.989348  0.947658  0.171185  1.199333  0.263455  0.517376  classC\n",
              "2  5.268698  1.174208  0.211185  1.534233  0.253455  0.487376  classB\n",
              "3  5.593398  1.195308  0.201185  1.552133  0.263455  0.497376  classA\n",
              "4  4.091948  1.009908  0.131185  1.234283  0.263455  0.547376  classC"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dn-eRlLdhbpR",
        "outputId": "3e75134b-55bf-48fe-a9be-3fed42410bab"
      },
      "source": [
        "data.info()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 1606 entries, 0 to 802\n",
            "Data columns (total 7 columns):\n",
            " #   Column  Non-Null Count  Dtype  \n",
            "---  ------  --------------  -----  \n",
            " 0   0       1606 non-null   float64\n",
            " 1   1       1606 non-null   float64\n",
            " 2   2       1606 non-null   float64\n",
            " 3   3       1606 non-null   float64\n",
            " 4   4       1606 non-null   float64\n",
            " 5   5       1606 non-null   float64\n",
            " 6   Class   1606 non-null   object \n",
            "dtypes: float64(6), object(1)\n",
            "memory usage: 100.4+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7LFOqILjnKT0"
      },
      "source": [
        "Importation des données à predire "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "heL10X9ruBpK",
        "outputId": "4deb4112-f658-4dec-d1f6-e221fcf52c12"
      },
      "source": [
        "data_final_sample='/content/drive/MyDrive/ESILV/finalTest.csv'\n",
        "data_final = pd.read_csv(data_final_sample,sep=',',header=None)\n",
        "data_final.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.672548</td>\n",
              "      <td>1.315558</td>\n",
              "      <td>0.151185</td>\n",
              "      <td>1.632833</td>\n",
              "      <td>0.253455</td>\n",
              "      <td>0.527376</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5.533198</td>\n",
              "      <td>1.281308</td>\n",
              "      <td>0.191185</td>\n",
              "      <td>1.647633</td>\n",
              "      <td>0.263455</td>\n",
              "      <td>0.497376</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7.201398</td>\n",
              "      <td>1.761408</td>\n",
              "      <td>0.131185</td>\n",
              "      <td>2.146483</td>\n",
              "      <td>0.263455</td>\n",
              "      <td>0.547376</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.080498</td>\n",
              "      <td>0.953708</td>\n",
              "      <td>0.181185</td>\n",
              "      <td>1.210083</td>\n",
              "      <td>0.263455</td>\n",
              "      <td>0.517376</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3.961898</td>\n",
              "      <td>0.934708</td>\n",
              "      <td>0.181185</td>\n",
              "      <td>1.190733</td>\n",
              "      <td>0.263455</td>\n",
              "      <td>0.507376</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          0         1         2         3         4         5\n",
              "0  5.672548  1.315558  0.151185  1.632833  0.253455  0.527376\n",
              "1  5.533198  1.281308  0.191185  1.647633  0.263455  0.497376\n",
              "2  7.201398  1.761408  0.131185  2.146483  0.263455  0.547376\n",
              "3  4.080498  0.953708  0.181185  1.210083  0.263455  0.517376\n",
              "4  3.961898  0.934708  0.181185  1.190733  0.263455  0.507376"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1cmluevLuydO",
        "outputId": "8ef56a7a-a245-4575-93c7-6b6b0e3e6776"
      },
      "source": [
        "data_final.info()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 3000 entries, 0 to 2999\n",
            "Data columns (total 6 columns):\n",
            " #   Column  Non-Null Count  Dtype  \n",
            "---  ------  --------------  -----  \n",
            " 0   0       3000 non-null   float64\n",
            " 1   1       3000 non-null   float64\n",
            " 2   2       3000 non-null   float64\n",
            " 3   3       3000 non-null   float64\n",
            " 4   4       3000 non-null   float64\n",
            " 5   5       3000 non-null   float64\n",
            "dtypes: float64(6)\n",
            "memory usage: 140.8 KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pa6uiWuHnO3S"
      },
      "source": [
        "Fonction de normalisation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4SYxYhmZhp6o"
      },
      "source": [
        "def normalisation(data):\n",
        "  data_norm = data.copy()\n",
        "  for i in range(0,len(data_norm.columns)-1):\n",
        "    moy,ecart = mean(data_norm.iloc[:,i]),std(data_norm.iloc[:,i])\n",
        "    for j in range(len(data_norm)):\n",
        "      data_norm.iloc[j,i]=round((data_norm.iloc[j,i]-moy)/ecart,2)\n",
        "  return data_norm"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WadLx0XbpqhI"
      },
      "source": [
        "Normalisation de nos données & séparation en plusieurs set"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VwrAVxBP4Nhb"
      },
      "source": [
        "data_final = normalisation(data_final)\n",
        "data=normalisation(data.sample(frac=1).reset_index(drop=True))\n",
        "data_train=normalisation(data.sample(frac=1).reset_index(drop=True)[:1000])\n",
        "data_test=normalisation(data.sample(frac=0.5).reset_index(drop=True)[1000:1300])\n",
        "data_valid=normalisation(data.sample(frac=1).reset_index(drop=True)[1300:])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z4uIxXT_pwMS"
      },
      "source": [
        "Algorithme KNN : \n",
        "\n",
        "\n",
        "1.   Calcul de la distance\n",
        "2.   K plus proches voisins\n",
        "3.   Prédiction \n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1Dy6WMHHwXK8"
      },
      "source": [
        "def distance_euclidienne(indData,indTest):\n",
        "  dist_ind=0  \n",
        "  for j in range(index_sol):\n",
        "    dist_ind+=sqrt((indTest[j]-indData[j])**2) \n",
        "  if (dist_ind==0.0):\n",
        "    dist_ind=100\n",
        "  return dist_ind\n",
        "\n",
        "def knn(indTest,data,k):\n",
        "  data[\"distance\"]=[distance_euclidienne(data.iloc[i,:],indTest) for i in range(len(data))]\n",
        "  return data.sort_values(by=\"distance\")[:k]\n",
        "\n",
        "def prediction_classification(voisins_proches):\n",
        "  return max(set(voisins_proches[\"Class\"].tolist()),key=voisins_proches[\"Class\"].tolist().count)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uZbpxEH_p9fo"
      },
      "source": [
        "Boucle final et Analyse des résultats"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zl4nnjQ8YTPt"
      },
      "source": [
        "def boucle_final(data,k):\n",
        "  prediction=[]\n",
        "  for i in range(len(data)):\n",
        "    indTest=data.iloc[i,:]\n",
        "    estim= prediction_classification(knn(indTest,data,k)) \n",
        "    prediction.append(estim)\n",
        "  return prediction\n",
        "\n",
        "def verif(matrix,data):\n",
        "  result_class=[]\n",
        "  for i in range(len(matrix)):\n",
        "    result_class.append((matrix[i][i])/(data.iloc[:,index_sol].value_counts()[i])*100)   \n",
        "    print(f\"Ratio de la classe {data.iloc[:,index_sol].value_counts().index.tolist()[i]} : {(matrix[i][i])/(data.iloc[:,index_sol].value_counts()[i])*100}%\")\n",
        "  print(f\"Ratio global : {round(sum(result_class)/len(result_class),3)}%\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rfZlDLQEqDTa"
      },
      "source": [
        "On lance l'algorithme sur nos données d'entrainement "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X64a9kbJ7IEe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7333f501-a74d-44e8-936d-78c0384d8eb5"
      },
      "source": [
        "k=5\n",
        "prediction=boucle_final(data_train,k)\n",
        "ground_truth=data_train.iloc[:,index_sol]\n",
        "labels = data_train.iloc[:,index_sol].value_counts().index.tolist()\n",
        "matrix = confusion_matrix(ground_truth,prediction,labels)\n",
        "print(matrix)\n",
        "verif(matrix,data_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[315   5   2   3   0]\n",
            " [ 15 209  12   0   0]\n",
            " [  5   4 182  14   0]\n",
            " [ 11   1  31 130   0]\n",
            " [  0   0   0   0  61]]\n",
            "Ratio de la classe classC : 96.92307692307692%\n",
            "Ratio de la classe classD : 88.5593220338983%\n",
            "Ratio de la classe classB : 88.78048780487805%\n",
            "Ratio de la classe classA : 75.14450867052022%\n",
            "Ratio de la classe classE : 100.0%\n",
            "Ratio global : 89.881%\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ls_wZc2dqb1X"
      },
      "source": [
        "On lance l'algorithme sur les données de Test (retour en arrière possible)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xQ8eGT5KpbhU",
        "outputId": "f5758996-9a30-4482-d66c-5f1831004089"
      },
      "source": [
        "k=5\n",
        "prediction=boucle_final(data_test,k)\n",
        "ground_truth=data_test.iloc[:,index_sol]\n",
        "labels = data_test.iloc[:,index_sol].value_counts().index.tolist()\n",
        "matrix = confusion_matrix(ground_truth,prediction,labels)\n",
        "print(matrix)\n",
        "verif(matrix,data_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[276   1   2   0   0]\n",
            " [  9 161   5   0   0]\n",
            " [  3   3 155   8   0]\n",
            " [ 10   0  35  85   0]\n",
            " [  0   0   0   0  50]]\n",
            "Ratio de la classe classC : 98.9247311827957%\n",
            "Ratio de la classe classD : 92.0%\n",
            "Ratio de la classe classB : 91.71597633136095%\n",
            "Ratio de la classe classA : 65.38461538461539%\n",
            "Ratio de la classe classE : 100.0%\n",
            "Ratio global : 89.605%\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A7l7F9l8qqRT"
      },
      "source": [
        "On lance l'algorithme sur nos données de validation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PR_-MTcfqi3v",
        "outputId": "bd45c07a-00c6-4a66-df75-ad3d6d740447"
      },
      "source": [
        "k=5\n",
        "prediction=boucle_final(data_valid,k)\n",
        "ground_truth=data_valid.iloc[:,index_sol]\n",
        "labels = data_valid.iloc[:,index_sol].value_counts().index.tolist()\n",
        "matrix = confusion_matrix(ground_truth,prediction,labels)\n",
        "print(matrix)\n",
        "verif(matrix,data_valid)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[251   4   2   0   0]\n",
            " [ 10 180   9   0   0]\n",
            " [  3   3 130  22   0]\n",
            " [ 13   0  33  87   0]\n",
            " [  0   0   0   0  56]]\n",
            "Ratio de la classe classC : 97.66536964980544%\n",
            "Ratio de la classe classD : 90.45226130653266%\n",
            "Ratio de la classe classB : 82.27848101265823%\n",
            "Ratio de la classe classA : 65.41353383458647%\n",
            "Ratio de la classe classE : 100.0%\n",
            "Ratio global : 87.162%\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4Osk_vw8quOE"
      },
      "source": [
        "Deuixème boucle permettant d'écrire dans un fichier .txt les résultats"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JlQ4i8o_rJbG"
      },
      "source": [
        "def boucle_finalv2(dataTest,dataLabel,k,fichier):\n",
        "  fichier = open(fichier,\"a\")\n",
        "  for i in range(len(dataTest)):\n",
        "    indTest=dataTest.iloc[i,:]\n",
        "    estim= prediction_classification(knn(indTest,dataLabel,k))   \n",
        "    result=str(estim)+\"\\n\"\n",
        "    print(i,result)\n",
        "    fichier.write(result)\n",
        "  fichier.close()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZFsA4D7zdp2Z"
      },
      "source": [
        "k=5\n",
        "fichier=\"debes_samples.txt\"\n",
        "prediction=boucle_finalv2(data_final,data,k,fichier)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "66BfsepNq9wr"
      },
      "source": [
        "Choix du paramètre K"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 548
        },
        "id": "6chDg9wdItjm",
        "outputId": "5d850c76-2a94-4e53-b4bf-7587bf9074f8"
      },
      "source": [
        "error=[]\n",
        "for k in range(1,40):\n",
        "  prediction=boucle_final(data[300:600],k)\n",
        "  ground_truth=data.iloc[300:600,index_sol]\n",
        "  labels = data.iloc[300:600,index_sol].value_counts().index.tolist()\n",
        "  matrix = confusion_matrix(ground_truth,prediction,labels)\n",
        "  precision=[]\n",
        "  for i in range(len(matrix)):\n",
        "    precision.append((matrix[i][i])/(data.iloc[:300,index_sol].value_counts()[i])*100)\n",
        "  error.append(round(sum(precision)/len(precision),3))\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(range(1, 40), error, color='red', linestyle='dashed', marker='o',\n",
        "         markerfacecolor='blue', markersize=10)\n",
        "plt.title('Précision moyenne en fonction de k')\n",
        "plt.xlabel('K')\n",
        "plt.ylabel('Précision moyenne')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:10: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  # Remove the CWD from sys.path while we load stuff.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Précision moyenne')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YmVTVDNMrECA"
      },
      "source": [
        "Vérification de la conformité du fichier de sortie (fourni par M. Rodrigues)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AdZwAJp5qOq4",
        "outputId": "08f8ef1b-f8c6-4b61-eed3-e15cae80da2f"
      },
      "source": [
        "import sys\n",
        "\n",
        "#code permettant de tester si un fichier de prédictions est au bon format.\n",
        "#il prend en paramètre un fichier de labels prédits\n",
        "#exemple> python checkLabels.py mesPredictions.txt\n",
        "\n",
        "allLabels = ['classA','classB','classC','classD','classE']\n",
        "#ce fichier s'attend à lire 3000 prédictions, une par ligne\n",
        "#réduisez nbLines en période de test.\n",
        "nbLines = 3000\n",
        "#fd =open(sys.argv[1],'r')\n",
        "#lines = fd.readlines()\n",
        "fd =open(\"/content/debes_samples.txt\",'r')\n",
        "lines = fd.readlines()\n",
        "\n",
        "print(len(lines))\n",
        "count=0\n",
        "for label in lines:\n",
        "\tif label.strip() in allLabels:\n",
        "\t\tcount+=1\n",
        "\telse:\n",
        "\t\tif count<nbLines:\n",
        "\t\t\tprint(\"Wrong label line:\"+str(count+1))\n",
        "\t\t\tbreak\n",
        "print(count)\n",
        "if count!=nbLines:\n",
        "\tprint(\"Labels Check : fail!\")\n",
        "else:\n",
        "\tprint(\"Labels Check : Successfull!\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "3000\n",
            "3000\n",
            "Labels Check : Successfull!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b8OmIBHw2SlG",
        "outputId": "ad13eee3-53b3-4e30-ecec-e5a0692eb53b"
      },
      "source": [
        "fileTest = open(\"/content/debes_samples.txt\",'r')\n",
        "lines=fileTest.readlines()\n",
        "fileTest2 = open(\"/content/DECASTELNAU.txt\",'r')\n",
        "lines2=fileTest2.readlines()\n",
        "count=0\n",
        "for i in range(len(lines)):\n",
        "  if(lines[i]==lines2[i]):\n",
        "    count+=1\n",
        "print(count)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2651\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9jvkmY58rNDg"
      },
      "source": [
        "Tests pour amélioration du Knn"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fBphSFFHF0Qb",
        "outputId": "a20af721-4117-4a88-f7a5-9b0226f57e22"
      },
      "source": [
        "def distancev2(indData,indTest):\n",
        "  dist_ind=0\n",
        "  for j in range(index_sol):\n",
        "    if (j!=2 & j!=3):\n",
        "      dist_ind+=sqrt((indTest[j]-indData[j])**2)\n",
        "  if (dist_ind==0.0):\n",
        "    dist_ind=100\n",
        "  return dist_ind\n",
        "\n",
        "def predictionv2(voisins_proches,indTest):\n",
        "  pred=max(set(voisins_proches[\"Class\"].tolist()),key=voisins_proches[\"Class\"].tolist().count)\n",
        "  if (pred=='classB'):\n",
        "    newList=knn(indTest,data,6)['Class'].tolist()#on change k\n",
        "    pred2=max(set(newList),key=newList.count)\n",
        "    pred=pred2\n",
        "  return pred\n",
        "\n",
        "k=3 \n",
        "prediction=boucle_final(data,k)\n",
        "ground_truth=data.iloc[:,index_sol]\n",
        "labels = data.iloc[:,index_sol].value_counts().index.tolist()\n",
        "matrix = confusion_matrix(ground_truth,prediction,labels)\n",
        "print(matrix)\n",
        "verif(matrix,data)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[496   8   2   9   0]\n",
            " [ 23 350  12   3   0]\n",
            " [  4  10 261  55   0]\n",
            " [ 25   2  73 172   0]\n",
            " [  0   0   0   0 101]]\n",
            "Ratio de la classe classC : 96.31067961165049%\n",
            "Ratio de la classe classD : 90.20618556701031%\n",
            "Ratio de la classe classB : 79.0909090909091%\n",
            "Ratio de la classe classA : 63.23529411764706%\n",
            "Ratio de la classe classE : 100.0%\n",
            "Ratio global : 85.769%\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}